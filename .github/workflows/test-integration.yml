name: Integration Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PLUGIN_NAME: stack3d

jobs:
  # Test plugin installation across different systems
  test-installation:
    name: Installation Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - archlinux:latest
          - fedora:latest
          - ubuntu:22.04
          - ubuntu:24.04
          - debian:12
        
    container:
      image: ${{ matrix.container }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          case "${{ matrix.container }}" in
            archlinux*)
              pacman -Syu --noconfirm
              pacman -S --noconfirm base-devel git nix
              ;;
            fedora*)
              dnf update -y
              dnf install -y git nix gcc-c++ pkg-config cmake
              ;;
            ubuntu*|debian*)
              apt-get update
              apt-get install -y git build-essential pkg-config cmake curl
              # Install Nix
              curl -L https://nixos.org/nix/install | sh -s -- --daemon
              ;;
          esac

      - name: Test plugin build
        run: |
          # Source nix if needed
          [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ] && \
            . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          
          # Test build
          if command -v nix >/dev/null 2>&1; then
            nix develop --command just build
            echo "‚úÖ Plugin built successfully on ${{ matrix.container }}"
          else
            echo "‚ö†Ô∏è Nix not available, testing manual build"
            make clean && make
          fi

      - name: Test plugin loading simulation
        run: |
          # Simulate plugin loading test
          if [ -f stack3d.so ]; then
            echo "‚úÖ Plugin file created: stack3d.so"
            file stack3d.so
            ldd stack3d.so || echo "Dependencies check skipped"
          else
            echo "‚ùå Plugin file not found"
            exit 1
          fi

  # Compatibility testing with different Hyprland versions
  hyprland-compatibility:
    name: Hyprland Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hyprland_version:
          - "latest"
          - "0.50.0"
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: hyprland
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Test with Hyprland ${{ matrix.hyprland_version }}
        run: |
          # Build plugin against specific Hyprland version
          nix develop --command bash -c "
            echo 'Testing compatibility with Hyprland ${{ matrix.hyprland_version }}'
            just build
            
            # Basic API compatibility check
            if [ -f stack3d.so ]; then
              echo '‚úÖ Plugin compiled successfully'
              
              # Check for required symbols
              nm stack3d.so | grep -E '(pluginInit|pluginExit)' && \
                echo '‚úÖ Plugin symbols found' || \
                echo '‚ö†Ô∏è Plugin symbols check needs manual verification'
            fi
          "

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix and dependencies
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install performance tools
        run: |
          nix-env -iA nixpkgs.valgrind nixpkgs.perf-tools nixpkgs.time

      - name: Build optimized version
        run: |
          nix develop --command bash -c "
            # Build with optimizations
            CXXFLAGS='-O3 -march=native' just build
          "

      - name: Run performance benchmarks
        run: |
          nix develop --command bash -c "
            # Memory usage test
            echo 'üß† Memory usage test'
            /usr/bin/time -v ls stack3d.so 2>&1 | grep -E '(Maximum resident|Page faults)'
            
            # Build time benchmark
            echo '‚è±Ô∏è Build time benchmark'
            time (make clean && just build)
            
            # Plugin size check
            echo 'üìè Plugin size check'
            ls -lh stack3d.so
            
            # Symbol analysis
            echo 'üîç Symbol analysis'
            nm --size-sort stack3d.so | head -20
          "

      - name: Memory leak detection
        run: |
          nix develop --command bash -c "
            # Note: Full memory leak testing requires runtime environment
            echo 'üîç Static analysis for potential leaks'
            
            # Check for common patterns that might cause leaks
            grep -r 'new ' src/ include/ || echo 'No raw new operators found'
            grep -r 'malloc\|calloc' src/ include/ || echo 'No raw malloc calls found'
            
            echo '‚úÖ Static memory safety check completed'
          "

  # Stress testing
  stress-test:
    name: Stress Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build plugin
        run: |
          nix develop --command just build

      - name: Concurrent build test
        run: |
          nix develop --command bash -c "
            echo 'üîÑ Testing concurrent builds'
            
            # Test multiple builds in parallel
            for i in {1..5}; do
              (make clean && just build && echo 'Build $i completed') &
            done
            wait
            
            echo '‚úÖ Concurrent build test completed'
          "

      - name: Large configuration test
        run: |
          nix develop --command bash -c "
            # Test with many source files (simulate large codebase)
            echo 'üìö Large codebase simulation test'
            
            # Create temporary test files
            mkdir -p stress_test
            for i in {1..100}; do
              echo '#include <iostream>' > stress_test/test_$i.cpp
              echo 'void test_function_$i() {}' >> stress_test/test_$i.cpp
            done
            
            # Test compilation with many files
            g++ -c stress_test/test_*.cpp 2>/dev/null && \
              echo '‚úÖ Large file compilation test passed' || \
              echo '‚ö†Ô∏è Large file test needs optimization'
            
            # Cleanup
            rm -rf stress_test
          "

  # Code quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck clang-tidy clang-format lcov

      - name: Code complexity analysis
        run: |
          echo 'üìä Code complexity analysis'
          
          # Count lines of code
          echo "Lines of code:"
          find src/ include/ -name "*.cpp" -o -name "*.hpp" | xargs wc -l
          
          # Function complexity (basic)
          echo -e "\nüîç Function count per file:"
          find src/ -name "*.cpp" -exec grep -c "^[^/]*{" {} \; -print | paste - -

      - name: Documentation coverage
        run: |
          echo 'üìù Documentation coverage'
          
          # Check for header comments
          missing_docs=0
          for file in include/*.hpp; do
            if ! head -5 "$file" | grep -q "//\|/\*"; then
              echo "Missing documentation: $file"
              missing_docs=$((missing_docs + 1))
            fi
          done
          
          if [ $missing_docs -eq 0 ]; then
            echo '‚úÖ All header files have documentation'
          else
            echo "‚ö†Ô∏è $missing_docs files need documentation"
          fi

      - name: Security scan
        run: |
          echo 'üõ°Ô∏è Security analysis'
          
          # Basic security patterns check
          echo "Checking for unsafe patterns..."
          
          # Buffer operations
          grep -r "strcpy\|strcat\|sprintf\|gets" src/ include/ && \
            echo "‚ö†Ô∏è Potentially unsafe string operations found" || \
            echo "‚úÖ No unsafe string operations"
          
          # Integer overflows
          grep -r "size_t.*-\|unsigned.*-" src/ include/ && \
            echo "‚ö†Ô∏è Potential integer underflow patterns" || \
            echo "‚úÖ No obvious integer underflow patterns"

  # Integration summary
  integration-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [test-installation, hyprland-compatibility, performance-test, stress-test, quality-gates]
    if: always()
    
    steps:
      - name: Collect results
        run: |
          echo "## üìã Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Installation tests
          if [ "${{ needs.test-installation.result }}" = "success" ]; then
            echo "‚úÖ **Installation Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Installation Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Compatibility tests  
          if [ "${{ needs.hyprland-compatibility.result }}" = "success" ]; then
            echo "‚úÖ **Hyprland Compatibility**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Hyprland Compatibility**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance tests
          if [ "${{ needs.performance-test.result }}" = "success" ]; then
            echo "‚úÖ **Performance Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Performance Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Stress tests
          if [ "${{ needs.stress-test.result }}" = "success" ]; then
            echo "‚úÖ **Stress Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Stress Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Quality gates
          if [ "${{ needs.quality-gates.result }}" = "success" ]; then
            echo "‚úÖ **Quality Gates**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Quality Gates**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Final status
        run: |
          if [ "${{ needs.test-installation.result }}" = "success" ] && \
             [ "${{ needs.hyprland-compatibility.result }}" = "success" ] && \
             [ "${{ needs.performance-test.result }}" = "success" ] && \
             [ "${{ needs.stress-test.result }}" = "success" ] && \
             [ "${{ needs.quality-gates.result }}" = "success" ]; then
            echo "üéâ All integration tests passed!"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some integration tests failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi