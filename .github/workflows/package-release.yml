name: Package & Release

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'
      pre-release:
        description: 'Pre-release'
        required: false
        default: false
        type: boolean

env:
  PLUGIN_NAME: hyprland-stack3d
  MAINTAINER_NAME: "Stack3D Team"
  MAINTAINER_EMAIL: "team@stack3d.example.com"

jobs:
  # Build source package
  build-source:
    name: Build Source Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION#v}"

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build plugin
        run: |
          nix develop --command just build

      - name: Create source tarball
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          # Create source package
          mkdir -p dist/source
          tar --exclude='.git' \
              --exclude='dist' \
              --exclude='result*' \
              --exclude='*.so' \
              --exclude='*.o' \
              -czf dist/source/${PLUGIN_NAME}-${VERSION}.tar.gz .
              
          # Create checksums
          cd dist/source
          sha256sum ${PLUGIN_NAME}-${VERSION}.tar.gz > ${PLUGIN_NAME}-${VERSION}.tar.gz.sha256
          sha512sum ${PLUGIN_NAME}-${VERSION}.tar.gz > ${PLUGIN_NAME}-${VERSION}.tar.gz.sha512

      - name: Upload source artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-package
          path: dist/source/

  # Arch Linux package
  package-arch:
    name: Arch Linux Package
    runs-on: ubuntu-latest
    needs: build-source
    container:
      image: archlinux:latest
      
    steps:
      - name: Setup Arch environment
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git nix hyprland-git

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create PKGBUILD
        run: |
          VERSION=${{ needs.build-source.outputs.version }}
          
          mkdir -p dist/arch
          cat > dist/arch/PKGBUILD << 'EOF'
          # Maintainer: ${{ env.MAINTAINER_NAME }} <${{ env.MAINTAINER_EMAIL }}>
          
          pkgname=hyprland-stack3d-git
          _pkgname=hyprland-stack3d
          pkgver=${{ needs.build-source.outputs.version }}
          pkgrel=1
          pkgdesc="3D stack sliding animations plugin for Hyprland"
          arch=('x86_64' 'aarch64')
          url="https://github.com/${{ github.repository }}"
          license=('MIT')
          depends=('hyprland' 'gcc-libs')
          makedepends=('git' 'nix' 'pkg-config' 'cmake')
          conflicts=('hyprland-stack3d')
          provides=('hyprland-stack3d')
          source=("git+https://github.com/${{ github.repository }}.git#tag=v${pkgver}")
          sha256sums=('SKIP')
          
          build() {
              cd "$_pkgname"
              nix develop --command just build
          }
          
          package() {
              cd "$_pkgname"
              
              # Install plugin
              install -Dm755 stack3d.so "$pkgdir/usr/lib/hyprland/plugins/stack3d.so"
              
              # Install documentation
              install -Dm644 README.md "$pkgdir/usr/share/doc/$_pkgname/README.md"
              install -Dm644 hyprland_stack3d_plugin.md "$pkgdir/usr/share/doc/$_pkgname/FEATURES.md"
              
              # Install example configuration
              install -Dm644 examples/hyprland.conf "$pkgdir/usr/share/doc/$_pkgname/examples/hyprland.conf"
          }
          EOF

      - name: Create .SRCINFO
        run: |
          cd dist/arch
          makepkg --printsrcinfo > .SRCINFO

      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: dist/arch/

  # Fedora RPM package
  package-fedora:
    name: Fedora RPM Package
    runs-on: ubuntu-latest
    needs: build-source
    container:
      image: fedora:latest
      
    steps:
      - name: Setup Fedora environment
        run: |
          dnf update -y
          dnf install -y rpm-build rpmdevtools git nix gcc-c++ pkg-config cmake

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup RPM build environment
        run: |
          rpmdev-setuptree

      - name: Create RPM spec file
        run: |
          VERSION=${{ needs.build-source.outputs.version }}
          
          mkdir -p dist/fedora
          cat > dist/fedora/${PLUGIN_NAME}.spec << EOF
          Name:           ${{ env.PLUGIN_NAME }}
          Version:        ${{ needs.build-source.outputs.version }}
          Release:        1%{?dist}
          Summary:        3D stack sliding animations plugin for Hyprland
          
          License:        MIT
          URL:            https://github.com/${{ github.repository }}
          Source0:        %{name}-%{version}.tar.gz
          
          BuildRequires:  gcc-c++
          BuildRequires:  cmake
          BuildRequires:  pkg-config
          BuildRequires:  nix
          BuildRequires:  hyprland-devel
          
          Requires:       hyprland
          
          %description
          Stack3D is a Hyprland plugin that provides beautiful 3D stack sliding 
          animations with multiple layout modes including grid, circular, spiral, 
          and fibonacci arrangements.
          
          %prep
          %autosetup
          
          %build
          nix develop --command just build
          
          %install
          mkdir -p %{buildroot}%{_libdir}/hyprland/plugins
          install -m 755 stack3d.so %{buildroot}%{_libdir}/hyprland/plugins/
          
          mkdir -p %{buildroot}%{_docdir}/%{name}
          install -m 644 README.md %{buildroot}%{_docdir}/%{name}/
          install -m 644 hyprland_stack3d_plugin.md %{buildroot}%{_docdir}/%{name}/FEATURES.md
          
          %files
          %license LICENSE
          %doc %{_docdir}/%{name}
          %{_libdir}/hyprland/plugins/stack3d.so
          
          %changelog
          * $(date +'%a %b %d %Y') ${{ env.MAINTAINER_NAME }} <${{ env.MAINTAINER_EMAIL }}> - %{version}-1
          - Initial package release
          EOF

      - name: Download source
        uses: actions/download-artifact@v4
        with:
          name: source-package
          path: ~/rpmbuild/SOURCES/

      - name: Build RPM
        run: |
          cp dist/fedora/${PLUGIN_NAME}.spec ~/rpmbuild/SPECS/
          rpmbuild -ba ~/rpmbuild/SPECS/${PLUGIN_NAME}.spec
          
          # Copy built packages
          mkdir -p dist/fedora/rpms
          cp ~/rpmbuild/RPMS/*/*.rpm dist/fedora/rpms/
          cp ~/rpmbuild/SRPMS/*.rpm dist/fedora/rpms/

      - name: Upload Fedora packages
        uses: actions/upload-artifact@v4
        with:
          name: fedora-packages
          path: dist/fedora/

  # Debian/Ubuntu DEB package
  package-debian:
    name: Debian/Ubuntu DEB Package
    runs-on: ubuntu-latest
    needs: build-source
    strategy:
      matrix:
        distro: [ubuntu-22.04, ubuntu-24.04, debian-12]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts debhelper dh-make build-essential \
            pkg-config cmake git nix-bin

      - name: Setup Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Create Debian package structure
        run: |
          VERSION=${{ needs.build-source.outputs.version }}
          DISTRO=${{ matrix.distro }}
          
          mkdir -p dist/debian/${DISTRO}
          cd dist/debian/${DISTRO}
          
          # Create debian directory structure
          mkdir -p ${PLUGIN_NAME}-${VERSION}/debian
          
          # Copy source
          cp -r ../../../../* ${PLUGIN_NAME}-${VERSION}/ 2>/dev/null || true
          cd ${PLUGIN_NAME}-${VERSION}

      - name: Create Debian control files
        run: |
          VERSION=${{ needs.build-source.outputs.version }}
          DISTRO=${{ matrix.distro }}
          cd dist/debian/${DISTRO}/${PLUGIN_NAME}-${VERSION}
          
          # debian/control
          cat > debian/control << EOF
          Source: ${{ env.PLUGIN_NAME }}
          Section: x11
          Priority: optional
          Maintainer: ${{ env.MAINTAINER_NAME }} <${{ env.MAINTAINER_EMAIL }}>
          Build-Depends: debhelper-compat (= 13),
                         cmake,
                         pkg-config,
                         nix-bin,
                         g++
          Standards-Version: 4.6.0
          Homepage: https://github.com/${{ github.repository }}
          
          Package: ${{ env.PLUGIN_NAME }}
          Architecture: any
          Depends: \${shlibs:Depends}, \${misc:Depends}, hyprland
          Description: 3D stack sliding animations plugin for Hyprland
           Stack3D provides beautiful 3D perspective animations for window
           management in Hyprland, featuring multiple layout modes including
           grid, circular, spiral, and fibonacci arrangements with smooth
           bezier curve transitions.
          EOF
          
          # debian/rules
          cat > debian/rules << 'EOF'
          #!/usr/bin/make -f
          
          %:
          	dh $@
          
          override_dh_auto_build:
          	nix develop --command just build
          
          override_dh_auto_install:
          	mkdir -p debian/${{ env.PLUGIN_NAME }}/usr/lib/hyprland/plugins
          	install -m 755 stack3d.so debian/${{ env.PLUGIN_NAME }}/usr/lib/hyprland/plugins/
          	mkdir -p debian/${{ env.PLUGIN_NAME }}/usr/share/doc/${{ env.PLUGIN_NAME }}
          	install -m 644 README.md debian/${{ env.PLUGIN_NAME }}/usr/share/doc/${{ env.PLUGIN_NAME }}/
          	install -m 644 hyprland_stack3d_plugin.md debian/${{ env.PLUGIN_NAME }}/usr/share/doc/${{ env.PLUGIN_NAME }}/FEATURES.md
          EOF
          chmod +x debian/rules
          
          # debian/changelog
          cat > debian/changelog << EOF
          ${{ env.PLUGIN_NAME }} (${VERSION}-1) unstable; urgency=medium
          
            * Initial release
            * 3D stack animations with multiple layout modes
            * Bezier curve transitions and physics-based motion
            * Support for 7 different animation styles
          
           -- ${{ env.MAINTAINER_NAME }} <${{ env.MAINTAINER_EMAIL }}>  $(date -R)
          EOF
          
          # debian/compat
          echo "13" > debian/compat
          
          # debian/copyright
          cat > debian/copyright << EOF
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: ${{ env.PLUGIN_NAME }}
          Source: https://github.com/${{ github.repository }}
          
          Files: *
          Copyright: 2024 ${{ env.MAINTAINER_NAME }}
          License: MIT
          
          License: MIT
           Permission is hereby granted, free of charge, to any person obtaining a
           copy of this software and associated documentation files (the "Software"),
           to deal in the Software without restriction, including without limitation
           the rights to use, copy, modify, merge, publish, distribute, sublicense,
           and/or sell copies of the Software, and to permit persons to whom the
           Software is furnished to do so, subject to the following conditions:
           .
           The above copyright notice and this permission notice shall be included
           in all copies or substantial portions of the Software.
          EOF

      - name: Build DEB package
        run: |
          VERSION=${{ needs.build-source.outputs.version }}
          DISTRO=${{ matrix.distro }}
          cd dist/debian/${DISTRO}/${PLUGIN_NAME}-${VERSION}
          
          # Build package
          debuild -us -uc -b
          
          # Copy built packages
          mkdir -p ../../../debs/${DISTRO}
          cp ../*.deb ../../../debs/${DISTRO}/
          cp ../*.changes ../../../debs/${DISTRO}/ || true

      - name: Upload DEB packages
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages-${{ matrix.distro }}
          path: dist/debian/debs/

  # Create GitHub release with all packages
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-source, package-arch, package-fedora, package-debian]
    if: github.event_name == 'release'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Organize release assets
        run: |
          mkdir -p release-assets
          
          # Source package
          cp dist/source-package/* release-assets/
          
          # Arch package
          cp dist/arch-package/* release-assets/
          
          # Fedora packages
          cp dist/fedora-packages/rpms/* release-assets/
          
          # Debian packages
          find dist/ -name "*.deb" -exec cp {} release-assets/ \;
          
          # Create installation script
          cat > release-assets/install.sh << 'EOF'
          #!/bin/bash
          # Hyprland Stack3D Plugin Installer
          
          set -e
          
          echo "🚀 Installing Hyprland Stack3D Plugin..."
          
          # Detect distribution
          if [ -f /etc/arch-release ]; then
              echo "📦 Detected Arch Linux"
              echo "Install via AUR: yay -S hyprland-stack3d-git"
          elif [ -f /etc/fedora-release ]; then
              echo "📦 Detected Fedora"
              echo "Install the RPM package from releases"
          elif [ -f /etc/debian_version ]; then
              echo "📦 Detected Debian/Ubuntu"
              echo "Install the DEB package from releases"
          else
              echo "📦 Manual installation required"
              echo "1. Download stack3d.so from releases"
              echo "2. Copy to ~/.config/hypr/plugins/"
              echo "3. Add 'plugin = ~/.config/hypr/plugins/stack3d.so' to hyprland.conf"
          fi
          EOF
          chmod +x release-assets/install.sh
          
          # List all assets
          echo "📋 Release assets:"
          ls -la release-assets/

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          draft: false
          prerelease: ${{ github.event.inputs.pre-release || false }}
          body: |
            ## 🎉 Hyprland Stack3D Plugin Release
            
            ### 📦 Available Packages
            
            - **Arch Linux**: `hyprland-stack3d-git` (AUR)
            - **Fedora**: RPM packages for Fedora 38, 39, 40
            - **Ubuntu/Debian**: DEB packages for Ubuntu 22.04, 24.04, Debian 12
            - **Source**: Tarball with build instructions
            
            ### 🚀 Installation
            
            Download the appropriate package for your distribution or use the `install.sh` script.
            
            ### ✨ Features
            
            - 🎯 3D stack animations with perspective
            - 🔄 Multiple layout modes (Grid, Circular, Spiral, Fibonacci)
            - 🎨 7 different transition styles
            - ⚡ Physics-based smooth animations
            - 🎮 Easy keybind integration
            
            ### 📖 Usage
            
            Add to your `hyprland.conf`:
            ```
            plugin = /path/to/stack3d.so
            bind = SUPER, grave, exec, hyprctl dispatch stack3d toggle
            ```
            
            Full documentation available in the repository.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}