[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version = "1.0.0"
update_changelog_on_bump = true
major_version_zero = true

[tool.commitizen.customize]
message_template = "{{change_type}}{{scope}}: {{message}}"
example = "feat(plugin): add new animation style"
schema = """
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
"""

schema_pattern = "^(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\\(.+\\))?(!)?:.+"

# Type definitions
[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
    {value = "feat", name = "feat: ‚ú® A new feature"},
    {value = "fix", name = "fix: üêõ A bug fix"},
    {value = "docs", name = "docs: üìö Documentation only changes"},
    {value = "style", name = "style: üé® Changes that do not affect the meaning of the code"},
    {value = "refactor", name = "refactor: ‚ôªÔ∏è  A code change that neither fixes a bug nor adds a feature"},
    {value = "perf", name = "perf: ‚ö°Ô∏è A code change that improves performance"},
    {value = "test", name = "test: ‚úÖ Adding missing tests or correcting existing tests"},
    {value = "build", name = "build: üî® Changes that affect the build system or external dependencies"},
    {value = "ci", name = "ci: üë∑ Changes to our CI configuration files and scripts"},
    {value = "chore", name = "chore: üîß Other changes that don't modify src or test files"},
    {value = "revert", name = "revert: ‚è™ Reverts a previous commit"},
]
message = "Select the type of change that you're committing"

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change? (class or file name): (press [enter] to skip)"

[[tool.commitizen.customize.questions]]
type = "input"
name = "subject"
message = "Write a short, imperative tense description of the change (max 50 chars):\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "body"
message = "Provide a longer description of the change: (press [enter] to skip)\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "footer"
message = "List any BREAKING CHANGES or CLOSES issues: (press [enter] to skip)\n"

# Bump settings
bump_pattern = "^(break|new|fix|hotfix)"
bump_map = {"break" = "MAJOR", "new" = "MINOR", "fix" = "PATCH", "hotfix" = "PATCH"}
change_type_order = ["BREAKING CHANGE", "feat", "fix", "refactor", "perf"]