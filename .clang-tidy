# Clang-Tidy configuration for Hyprland Stack3D Plugin
# Comprehensive static analysis for C++23 code

---
# Enable most checks except for overly pedantic ones
Checks: >
  *,
  -abseil-*,
  -altera-*,
  -android-*,
  -boost-*,
  -darwin-*,
  -fuchsia-*,
  -google-*,
  -hicpp-*,
  -linuxkernel-*,
  -llvm-*,
  -llvmlibc-*,
  -objc-*,
  -openmp-*,
  -zircon-*,
  -misc-non-private-member-variables-in-classes,
  -misc-const-correctness,
  -readability-magic-numbers,
  -readability-identifier-length,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-avoid-c-arrays,
  -modernize-avoid-c-arrays,
  -modernize-use-trailing-return-type,
  -readability-convert-member-functions-to-static

# Configuration for specific checks
CheckOptions:
  # Naming conventions
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.FunctionCase
    value: camelCase
  - key: readability-identifier-naming.VariableCase
    value: camelCase
  - key: readability-identifier-naming.MemberCase
    value: camelCase
  - key: readability-identifier-naming.MemberPrefix
    value: m_
  - key: readability-identifier-naming.ParameterCase
    value: camelCase
  - key: readability-identifier-naming.EnumCase
    value: CamelCase
  - key: readability-identifier-naming.EnumConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE
  - key: readability-identifier-naming.GlobalConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.StaticConstantCase
    value: UPPER_CASE

  # Function length limits
  - key: readability-function-size.LineThreshold
    value: 100
  - key: readability-function-size.StatementThreshold
    value: 50

  # Performance
  - key: performance-move-const-arg.CheckTriviallyCopyableMove
    value: false
  - key: performance-unnecessary-value-param.AllowedTypes
    value: '::std::function;::std::unique_ptr;::std::shared_ptr'

  # Modernization
  - key: modernize-loop-convert.MaxCopySize
    value: 16
  - key: modernize-loop-convert.MinConfidence
    value: reasonable
  - key: modernize-pass-by-value.IncludeStyle
    value: llvm
  - key: modernize-replace-auto-ptr.IncludeStyle
    value: llvm

  # Readability
  - key: readability-braces-around-statements.ShortStatementLines
    value: 1
  - key: readability-implicit-bool-conversion.AllowPointerConditions
    value: true
  - key: readability-implicit-bool-conversion.AllowIntegerConditions
    value: true
  - key: readability-redundant-member-init.IgnoreBaseInCopyConstructors
    value: true

  # Bugprone
  - key: bugprone-argument-comment.StrictMode
    value: false
  - key: bugprone-exception-escape.FunctionsThatShouldNotThrow
    value: ''

  # Misc
  - key: misc-throw-by-value-catch-by-reference.CheckThrowTemporaries
    value: true

  # CERT
  - key: cert-dcl16-c.NewSuffixes
    value: 'L;LL;LU;LLU'
  - key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField
    value: false

  # C++ Core Guidelines
  - key: cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors
    value: true
  - key: cppcoreguidelines-macro-usage.AllowedRegexp
    value: '^(ASSERT_|EXPECT_|TEST_|MOCK_)'
  - key: cppcoreguidelines-narrowing-conversions.WarnOnFloatingPointNarrowingConversion
    value: false

# Headers to analyze
HeaderFilterRegex: '(src|include)/.*\.(h|hpp)$'

# Analysis configuration
AnalyzeTemporaryDtors: true
FormatStyle: file
User: stack3d-dev